% stdout: "created\nstarted\n0\n1\n2\n3\n4\ndone\n"

co range(a: int, b: int) int {
	println("started");
	while (a < b) {
		yield a;
		a += 1;
	}
	% this gets ran on the last resume, when the control flow
	% goes to the 'else' case of 'resume'
	println("done");
}

fn main() void {
	% apply args 0,5 to range()
	let coro: co int = create(range, 0, 5);
	println("created");
	while(1) {
		% only now the code in range starts executing
		if resume (x: coro) {
			% if coroutine yields, the results gets bound to x
			println(x);
		} else {
			% optional branch for when the coroutine finishes
			break;
		}
	}
}

